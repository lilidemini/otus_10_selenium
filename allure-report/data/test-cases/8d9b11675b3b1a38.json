{"uid":"8d9b11675b3b1a38","name":"Check logos on slider on main page","fullName":"tests.test_pages#test_auto_swiper_carousel","historyId":"8130b04595a2c7171b623b452fac3048","time":{"start":1696435533671,"stop":1696435534044,"duration":373},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSelectorException: Message: Given css selector expression \"##carousel-banner-1 .active [alt=\"Dell\"]\" is invalid: InvalidSelectorError: Document.querySelector: '##carousel-banner-1 .active [alt=\"Dell\"]' is not a valid selector: \"##carousel-banner-1 .active [alt=\"Dell\"]\"\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:189:5\nInvalidSelectorError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:428:5\nfind_@chrome://remote/content/shared/DOM.sys.mjs:166:11\ndom.find/</findElements<@chrome://remote/content/shared/DOM.sys.mjs:114:24\nevalFn@chrome://remote/content/marionette/sync.sys.mjs:117:7\nPollPromise/<@chrome://remote/content/marionette/sync.sys.mjs:137:5\nPollPromise@chrome://remote/content/marionette/sync.sys.mjs:108:10\ndom.find/<@chrome://remote/content/shared/DOM.sys.mjs:112:24\ndom.find@chrome://remote/content/shared/DOM.sys.mjs:111:10\nfindElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:242:21\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:92:31","statusTrace":"base_url = 'http://localhost/'\nbrowser = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"0a2d66b2-db7a-40bd-a718-e2030ef90f02\")>\ncarousel_logos = ('css selector', '##carousel-banner-1 .active [alt=\"Dell\"]')\n\n    @allure.feature('Main Page')\n    @allure.severity(allure.severity_level.TRIVIAL)\n    @allure.title('Check logos on slider on main page')\n    @pytest.mark.main\n    @pytest.mark.parametrize('carousel_logos', [MainPage.LOGO_SONY, MainPage.LOGO_CANON,\n                                                MainPage.LOGO_DELL, MainPage.LOGO_DISNEY],\n                             ids=['sony', 'canon', 'dell', 'disney'])\n    def test_auto_swiper_carousel(base_url, browser, carousel_logos):\n        page = MainPage(browser)\n        page.open(base_url)\n>       WebDriverWait(browser, 30).until(\n            EC.visibility_of_element_located(carousel_logos)\n        )\n\ntests/test_pages.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:86: in until\n    value = method(self._driver)\nvenv/lib/python3.9/site-packages/selenium/webdriver/support/expected_conditions.py:139: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:830: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc8889b6c70>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"Given css selector expression \\\\\"##carousel-...sys.mjs:242:21\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:92:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: Given css selector expression \"##carousel-banner-1 .active [alt=\"Dell\"]\" is invalid: InvalidSelectorError: Document.querySelector: '##carousel-banner-1 .active [alt=\"Dell\"]' is not a valid selector: \"##carousel-banner-1 .active [alt=\"Dell\"]\"\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:189:5\nE       InvalidSelectorError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:428:5\nE       find_@chrome://remote/content/shared/DOM.sys.mjs:166:11\nE       dom.find/</findElements<@chrome://remote/content/shared/DOM.sys.mjs:114:24\nE       evalFn@chrome://remote/content/marionette/sync.sys.mjs:117:7\nE       PollPromise/<@chrome://remote/content/marionette/sync.sys.mjs:137:5\nE       PollPromise@chrome://remote/content/marionette/sync.sys.mjs:108:10\nE       dom.find/<@chrome://remote/content/shared/DOM.sys.mjs:112:24\nE       dom.find@chrome://remote/content/shared/DOM.sys.mjs:111:10\nE       findElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:242:21\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:92:31\n\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidSelectorException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1696435529607,"stop":1696435529607,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser","time":{"start":1696435529608,"stop":1696435533670,"duration":4062},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSelectorException: Message: Given css selector expression \"##carousel-banner-1 .active [alt=\"Dell\"]\" is invalid: InvalidSelectorError: Document.querySelector: '##carousel-banner-1 .active [alt=\"Dell\"]' is not a valid selector: \"##carousel-banner-1 .active [alt=\"Dell\"]\"\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:189:5\nInvalidSelectorError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:428:5\nfind_@chrome://remote/content/shared/DOM.sys.mjs:166:11\ndom.find/</findElements<@chrome://remote/content/shared/DOM.sys.mjs:114:24\nevalFn@chrome://remote/content/marionette/sync.sys.mjs:117:7\nPollPromise/<@chrome://remote/content/marionette/sync.sys.mjs:137:5\nPollPromise@chrome://remote/content/marionette/sync.sys.mjs:108:10\ndom.find/<@chrome://remote/content/shared/DOM.sys.mjs:112:24\ndom.find@chrome://remote/content/shared/DOM.sys.mjs:111:10\nfindElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:242:21\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:92:31","statusTrace":"base_url = 'http://localhost/'\nbrowser = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"0a2d66b2-db7a-40bd-a718-e2030ef90f02\")>\ncarousel_logos = ('css selector', '##carousel-banner-1 .active [alt=\"Dell\"]')\n\n    @allure.feature('Main Page')\n    @allure.severity(allure.severity_level.TRIVIAL)\n    @allure.title('Check logos on slider on main page')\n    @pytest.mark.main\n    @pytest.mark.parametrize('carousel_logos', [MainPage.LOGO_SONY, MainPage.LOGO_CANON,\n                                                MainPage.LOGO_DELL, MainPage.LOGO_DISNEY],\n                             ids=['sony', 'canon', 'dell', 'disney'])\n    def test_auto_swiper_carousel(base_url, browser, carousel_logos):\n        page = MainPage(browser)\n        page.open(base_url)\n>       WebDriverWait(browser, 30).until(\n            EC.visibility_of_element_located(carousel_logos)\n        )\n\ntests/test_pages.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:86: in until\n    value = method(self._driver)\nvenv/lib/python3.9/site-packages/selenium/webdriver/support/expected_conditions.py:139: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:830: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc8889b6c70>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"Given css selector expression \\\\\"##carousel-...sys.mjs:242:21\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:92:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: Given css selector expression \"##carousel-banner-1 .active [alt=\"Dell\"]\" is invalid: InvalidSelectorError: Document.querySelector: '##carousel-banner-1 .active [alt=\"Dell\"]' is not a valid selector: \"##carousel-banner-1 .active [alt=\"Dell\"]\"\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:189:5\nE       InvalidSelectorError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:428:5\nE       find_@chrome://remote/content/shared/DOM.sys.mjs:166:11\nE       dom.find/</findElements<@chrome://remote/content/shared/DOM.sys.mjs:114:24\nE       evalFn@chrome://remote/content/marionette/sync.sys.mjs:117:7\nE       PollPromise/<@chrome://remote/content/marionette/sync.sys.mjs:137:5\nE       PollPromise@chrome://remote/content/marionette/sync.sys.mjs:108:10\nE       dom.find/<@chrome://remote/content/shared/DOM.sys.mjs:112:24\nE       dom.find@chrome://remote/content/shared/DOM.sys.mjs:111:10\nE       findElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:242:21\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:92:31\n\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidSelectorException","steps":[{"name":"Открываю url","time":{"start":1696435533672,"stop":1696435534031,"duration":359},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"base_url","value":"'http://localhost/'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"63ab00da34f30669","name":"log","source":"63ab00da34f30669.txt","type":"text/plain","size":6202},{"uid":"b8380b7522070ae0","name":"stderr","source":"b8380b7522070ae0.txt","type":"text/plain","size":131}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"browser::fin","time":{"start":1696435534143,"stop":1696435535235,"duration":1092},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"severity","value":"trivial"},{"name":"feature","value":"Main Page"},{"name":"tag","value":"main"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_pages"},{"name":"host","value":"0405NBB0PGX7CLF"},{"name":"thread","value":"49796-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_pages"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"carousel_logos","value":"('css selector', '##carousel-banner-1 .active [alt=\"Dell\"]')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"trivial","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["main"]},"source":"8d9b11675b3b1a38.json","parameterValues":["('css selector', '##carousel-banner-1 .active [alt=\"Dell\"]')"]}